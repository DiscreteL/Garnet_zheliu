from tensor import Tensor,reset_gloabal_store,untrain,autograd_function
import tensor
program.options_from_args()
ROW=2
COL=3
LENGTH=10

xArray = Array(LENGTH,sfix)
for i in range(0,LENGTH):
    xArray[i]=sfix(i-LENGTH/2)

xMultiArray = MultiArray([ROW, COL], sfix)
for i in range(0,ROW):
    for  j in range(0,COL):
        xMultiArray[i][j] = sfix(i-j)

def test_single_operation(func,Value):
    Value.print_reveal_nested()
    input = Tensor(Value)
    output = getattr(input, func)() 
    tensor.train()
    tensor.reset_op_id()
    output = getattr(input, func)()
    output.backward()
    output.value.print_reveal_nested()
    input.grad.print_reveal_nested()
    tensor.reset_op_id()
    untrain()
    reset_gloabal_store()


# test for Array and MultiArray
def test_sin():
    test_single_operation('sin',xArray)
    test_single_operation('sin',xMultiArray)

def test_abs():
    test_single_operation('abs',xArray)
    test_single_operation('abs',xMultiArray)

def test_exp():
   # test_single_operation('exp',xArray)
    test_single_operation('exp',xMultiArray)

def test_log():
    test_single_operation('log',xArray)
    test_single_operation('log',xMultiArray)

def test_sum():
    test_single_operation('sum',xArray)
    test_single_operation('sum',xMultiArray)

def test_transpose():
    #test_single_operation('sum',xArray)  #todo
    test_single_operation('transpose',xMultiArray)




@autograd_function
def test_sin2():
    xMultiArray.print_reveal_nested()
    input1 = Tensor(xMultiArray)

    input2 = input1.sin()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.sum()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_permute():
    print_ln('test_permute():')
    XMultiArray = MultiArray([ROW, COL,4], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            for k in range(0,4):
                XMultiArray[i][j][k] = sfix(i-j+k)
    XMultiArray.print_reveal_nested()
    input1 = Tensor(XMultiArray)

    input2 = input1.permute([1,2,0])
    input3=input2.sin()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.permute([1,2,0])
    input3=input2.sin()

    input3.backward()
    input3.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


@autograd_function
def test_reshape_MultiArrayToMultiArray():
    print_ln('test_reshape_MultiArrayToMultiArray()')
    XMultiArray = MultiArray([ROW, COL,4], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            for k in range(0,4):
                XMultiArray[i][j][k] = sfix(i-j+k)
    XMultiArray.print_reveal_nested()
    input1 = Tensor(XMultiArray)

    input2 = input1.reshape([6,4])

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape([6,4])
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_reshape_ArrayToMultiArray():
    print_ln('test_reshape_ArrayToMultiArray()')
    xArray.print_reveal_nested()
    input1 = Tensor(xArray)

    input2 = input1.reshape([2,5])

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape([2,5])
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


@autograd_function
def test_reshape_MultiArrayToArray():
    print_ln('test_reshape_MultiArrayToArray()')
    xMultiArray.print_reveal_nested()
    input1 = Tensor(xMultiArray)

    input2 = input1.reshape(ROW*COL)

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape(ROW*COL)
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


test_reshape_MultiArrayToMultiArray()
test_reshape_ArrayToMultiArray()
test_reshape_MultiArrayToArray()

#test_transpose()
test_permute()