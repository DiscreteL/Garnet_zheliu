from tensor import Tensor
import tensor
program.options_from_args()
ROW=3
COL=3
LENGTH=10

def test_mul():
    i, j = 3, 3
    x = MultiArray([i, j], sfix)
    x.assign_all(1)
    x.print_reveal_nested()
    y = MultiArray([i, j], sfix)
    y.assign_all(5)
    y.print_reveal_nested()
    input1 = Tensor(x)
    input2 = Tensor(y)

    input3 = input1 *input2

    tensor.train()
    tensor.reset_op_id()

    input3 = input1 *input2

    input3.backward()
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()
    tensor.reset_op_id()
    tensor.reset_operation()

def test_abs():
    i, j = 3, 3
    x = MultiArray([i, j], sfix)
    for i in range(0,3):
        for  j in range(0,3):
            x[i][j] = sfix(i-j)
    x.print_reveal_nested()
    input1 = Tensor(x)

    input2 = input1.abs()
    

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.abs()
    input2.value.print_reveal_nested()
    input2.backward()
    
    input1.grad.print_reveal_nested()
    tensor.reset_op_id()
    tensor.reset_operation()

def test_exp():
    i, j = 3, 3
    x = MultiArray([i, j], sfix)
    for i in range(0,3):
        for  j in range(0,3):
            x[i][j] = sfix(i+j)
    x.print_reveal_nested()
    input1 = Tensor(x)

    input2 = input1.exp()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.exp()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()
    tensor.reset_op_id()
    tensor.reset_operation()

def test_log():
    i, j = 3, 3
    x = MultiArray([i, j], sfix)
    for i in range(0,3):
        for  j in range(0,3):
            x[i][j] = sfix(i+j)
    x.print_reveal_nested()
    input1 = Tensor(x)

    input2 = input1.log()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.log()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()
    tensor.reset_op_id()
    tensor.reset_operation()

def test_sin():
    xArray = Array(LENGTH,sfix)
    for i in range(0,LENGTH):
        xArray[i]=sfix(i)
    test_single_operation('sin',xArray)
    xMultiArray = MultiArray([ROW, COL], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            x[i][j] = sfix(i+j)
    test_single_operation('sin',xMultiArray)

    

def test_single_operation(func,Value):
    Value.print_reveal_nested()
    input = Tensor(Value)
    output = getattr(input, func)() #
    tensor.train()
    tensor.reset_op_id()
    output = getattr(input, func)()
    output.backward()
    output.value.print_reveal_nested()
    input.grad.print_reveal_nested()
    tensor.reset_op_id()
    tensor.reset_operation()

#test_mul()
#test_abs()
#test_exp()
#test_log()
#test_pow(3)
#test_sum()
test_mean()
#test_sin()
