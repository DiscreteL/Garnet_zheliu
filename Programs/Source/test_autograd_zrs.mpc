from tensor import Tensor,reset_gloabal_store,untrain,autograd_function
import tensor
program.options_from_args()
ROW=2
COL=3
HEIGHT=4
LENGTH=10

xArray = Array(LENGTH, sfix)
for i in range(0,LENGTH):
    xArray[i]=sfix(i-LENGTH/2)

xMultiArray_2 = MultiArray([ROW, COL], sfix)
for i in range(0,ROW):
    for  j in range(0,COL):
        xMultiArray_2[i][j] = sfix(i-j)

xMultiArray_3 = MultiArray([ROW, COL,HEIGHT], sfix)
for i in range(0,ROW):
    for  j in range(0,COL):
        for k in range(0,HEIGHT):
            xMultiArray_3[i][j][k] = sfix(i-j+k)


def test_single_operation(func,Value):
    Value.print_reveal_nested()
    input = Tensor(Value, req_grad = True)
    output = getattr(input, func)() 
    tensor.train()
    tensor.reset_op_id()
    output = getattr(input, func)()
    output.backward()
    output.value.print_reveal_nested()
    input.grad.print_reveal_nested()
    tensor.reset_op_id()
    untrain()
    reset_gloabal_store()


# test for Array and MultiArray
def test_sin():
    test_single_operation('sin',xArray)
    test_single_operation('sin',xMultiArray_2)

def test_abs():
    test_single_operation('abs',xArray)
    test_single_operation('abs',xMultiArray_2)

def test_exp():
   # test_single_operation('exp',xArray)
    test_single_operation('exp',xMultiArray_2)

def test_log():
    test_single_operation('log',xArray)
    test_single_operation('log',xMultiArray_2)

def test_sum():
    test_single_operation('sum',xArray)
    test_single_operation('sum',xMultiArray_2)


@autograd_function
def test_sin2():
    xMultiArray_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_2, req_grad = True)

    input2 = input1.sin()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.sum()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_permute():
    print_ln('test_permute():')
    xMultiArray_3 = MultiArray([ROW, COL,4], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            for k in range(0,4):
                xMultiArray_3[i][j][k] = sfix(i*12+j*4+k)
    xMultiArray_3.print_reveal_nested()
    input1 = Tensor(xMultiArray_3, req_grad = True)

    input2 = input1.permute([1,2,0])
    

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.permute([1,2,0])
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


@autograd_function
def test_reshape_MultiArrayToMultiArray():
    print_ln('test_reshape_MultiArrayToMultiArray()')
    xMultiArray_3.print_reveal_nested()
    input1 = Tensor(xMultiArray_3, req_grad = True)

    input2 = input1.reshape([6,4])

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape([6,4])
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_reshape_ArrayToMultiArray():
    print_ln('test_reshape_ArrayToMultiArray()')
    xArray.print_reveal_nested()
    input1 = Tensor(xArray, req_grad = True)

    input2 = input1.reshape([2,5])

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape([2,5])
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


@autograd_function
def test_reshape_MultiArrayToArray():
    print_ln('test_reshape_MultiArrayToArray()')
    xMultiArray_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_2, req_grad = True)

    input2 = input1.reshape(ROW*COL)

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.reshape(ROW*COL)
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_squeeze():
    xMultiArray_3_tmp = MultiArray([ROW, 1,HEIGHT], sfix)
    for i in range(0,ROW):
        for  j in range(0,1):
            for k in range(0,HEIGHT):
                xMultiArray_3_tmp[i][j][k] = sfix(i-j+k)
    print_ln('test_squeeze():')
    xMultiArray_3_tmp.print_reveal_nested()
    input1 = Tensor(xMultiArray_3_tmp, req_grad = True)

    input2 = input1.squeeze(1)

    tensor.train()
    tensor.reset_op_id()

    input2 =  input1.squeeze(1)
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_unsqueeze():
    print_ln('test_unsqueeze():')
    xMultiArray_2 = MultiArray([ROW, COL], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            xMultiArray_2[i][j] = sfix(i-j)
    xMultiArray_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_2, req_grad = True)

    input2 = input1.unsqueeze(0)

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.unsqueeze(0)
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_transpose_Array():
    print_ln('test_transpose_Array():')
    xArray = Array(LENGTH, sfix)
    for i in range(0,LENGTH):
        xArray[i]=sfix(i-LENGTH/2)
    xArray.print_reveal_nested()
    input1 = Tensor(xArray, req_grad = True)
    input2 = input1.transpose()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.transpose()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()

@autograd_function
def test_transpose_MultiArray():
    print_ln('test_transpose_MultiArray():')
    xMultiArray_2 = MultiArray([ROW, COL], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            xMultiArray_2[i][j] = sfix(i-j)
    xMultiArray_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_2, req_grad = True)
    input2 = input1.transpose()

    tensor.train()
    tensor.reset_op_id()

    input2 = input1.transpose()
    input2.backward()
    input2.value.print_reveal_nested()
    input1.grad.print_reveal_nested()


@autograd_function
def test_concate_Array():
    print_ln('test_concate_Array():')
    xArray_1 = Array(LENGTH, sfix)
    for i in range(0,LENGTH):
        xArray_1[i]=sfix(i-LENGTH/2)
    xArray_2 = Array(5, sfix)
    for i in range(0,5):
        xArray_2[i]=sfix(i+10+LENGTH/2)
    print_str("Array1 and Array2:\n")
    xArray_1.print_reveal_nested()
    xArray_2.print_reveal_nested()
    input1 = Tensor(xArray_1, req_grad = True)
    input2 = Tensor(xArray_2, req_grad = True)
    output=input1.concate(input2)

    tensor.train()
    tensor.reset_op_id()

    output=input1.concate(input2)
    
    output.backward()
    print_str("The output of Array1 concate Array2:\n")
    output.value.print_reveal_nested()
    print_str("The grad of Array1 and Array2:\n")
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()



@autograd_function
def test_concate_MultiArray():
    print_ln('test_concate_MultiArray():')
    xMultiArray_3_1 = MultiArray([ROW, COL+2,HEIGHT], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL+2):
            for k in range(0,HEIGHT):
                xMultiArray_3_1[i][j][k] = sfix(i+j+k+100)
    
    xMultiArray_3_2 = MultiArray([ROW, COL,HEIGHT], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            for k in range(0,HEIGHT):
                xMultiArray_3_2[i][j][k] = sfix(i+j+k)


    print_str("3-Dimension MultiArray1 and MultiArray2:\n")
    xMultiArray_3_1.print_reveal_nested()
    xMultiArray_3_2.print_reveal_nested()

    input1 = Tensor(xMultiArray_3_1, req_grad = True)
    input2 = Tensor(xMultiArray_3_2, req_grad = True)
    output=input1.concate(input2,1)

    tensor.train()
    tensor.reset_op_id()

    output=input1.concate(input2,1)
    
    output.backward()
    print_str("The output of 3-Dimension MultiArray1 concate MultiArray2 in axis=1:\n")
    output.value.print_reveal_nested()
    print_str("The grad of MultiArray1 and MultiArray2:\n")
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()


@autograd_function
def test_mm_MultiArray():
    print_ln('test_mm_MultiArray():')
    xMultiArray_2_1 = MultiArray([ROW, COL], sfix)
    for i in range(0,ROW):
        for  j in range(0,COL):
            xMultiArray_2_1[i][j] = sfix(1)

    xMultiArray_2_2 = MultiArray([COL, ROW], sfix)
    for i in range(0,COL):
        for  j in range(0,ROW):
            xMultiArray_2_2[i][j] = sfix(1)


    xMultiArray_2_1.print_reveal_nested()
    xMultiArray_2_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_2_1, req_grad = True)
    input2 = Tensor(xMultiArray_2_2, req_grad = True)
    output = input1.mm(input2)

    tensor.train()
    tensor.reset_op_id()

    output = input1.mm(input2)
    output.backward()
    output.value.print_reveal_nested()
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()


@autograd_function
def test_mv_MultiArray_Array():
    print_ln('test_mv_MultiArray_Array():')
    xMultiArray_1 = MultiArray([ROW, COL], sfix)
    xMultiArray_1.assign_all(1)

    xArray_2 = Array(COL, sfix)
    xArray_2.assign_all(1)


    xMultiArray_1.print_reveal_nested()
    xArray_2.print_reveal_nested()
    input1 = Tensor(xMultiArray_1, req_grad = True)
    input2 = Tensor(xArray_2, req_grad = True)
    output = input1.mv(input2)

    tensor.train()
    tensor.reset_op_id()

    output = input1.mv(input2)
    output.backward()
    output.value.print_reveal_nested()
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()

@autograd_function
def test_dot():
    print_ln('test_dot():')
    xArray_1 = Array(COL, sfix)
    xArray_1.assign_all(2)

    xArray_2 = Array(COL, sfix)
    xArray_2.assign_all(3)


    xArray_1.print_reveal_nested()
    xArray_2.print_reveal_nested()
    input1 = Tensor(xArray_1, req_grad = True)
    input2 = Tensor(xArray_2, req_grad = True)
    output = input1.dot(input2)

    tensor.train()
    tensor.reset_op_id()

    output = input1.dot(input2)
    output.backward()
    output.value.print_reveal_nested()
    input1.grad.print_reveal_nested()
    input2.grad.print_reveal_nested()




#test_mv_MultiArray_Array()
#test_dot()

#test_squeeze()
#test_unsqueeze()
test_permute()
#test_transpose_Array() #todo fix the bug
#test_transpose_MultiArray()
#test_reshape_MultiArrayToMultiArray()
#test_reshape_ArrayToMultiArray()
#test_reshape_MultiArrayToArray()

#test_concate_Array()
#test_concate_MultiArray()
#test_mm_MultiArray()






