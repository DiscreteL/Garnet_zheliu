import nn as nn
from tensor import Tensor,autograd_function
import optimizer as optim
import dataloader as dataloader
import functional as F
class LinearRegression(nn.Module):
    """
    Linear Regressoin Module, the input features and output 
    features are defaults both 1
    """
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(3,1)
        
    def forward(self,x):
        out = self.linear(x)
       # out = F.sigmoid(out)
        return out

x = MultiArray([3,3], sfix)
y = MultiArray([3,1], sfix)
for i in range(x.total_size()):
    x.assign_vector(sfix(i), i)

for i in range(y.total_size()):
    y.assign_vector(sfix(i), i)

dataload = dataloader.DataLoader(x, y, batch_size = 2, shuffle=True)

model = LinearRegression()

optimizer = optim.SGD(model.parameters(), lr = 0.01)
model.train(dataload.get_size())
params = list(model.parameters())

@for_range(1)
def _(i):
    input, label = dataload.get_data(i)
    out = model(input)
    optimizer.zero_grad()
    out.backward()
    #optimizer.step()