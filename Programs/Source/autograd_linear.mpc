import nn as nn
from tensor import Tensor,autograd_function
import optimizer as optim
class LinearRegression(nn.Module):
    """
    Linear Regressoin Module, the input features and output 
    features are defaults both 1
    """
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(3,1)
        
    def forward(self,x):
        out = self.linear(x)
        return out

x = MultiArray([3,2,3], sfix)
for i in range(x.total_size()):
    x.assign_vector(sfix(i), i)
x.print_reveal_nested()
input1 = Tensor(x)
model = LinearRegression()
print(list(model.parameters())[0].print_reveal_nested())
optimizer = optim.SGD(model.parameters(), lr = 0.01)
model.train(input1)
y = model(input1)
y.backward()
y.print_reveal_nested()
print(list(model.parameters())[0].grad.print_reveal_nested())